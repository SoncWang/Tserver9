CC=g++
AR=ar

SEPARATOR="~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

TARGET =jsoncpp
SOURCES = json_reader.cpp  json_value.cpp  json_writer.cpp  jsonPackage.cpp
INCLUDE = -I../include/

OBJS=$(patsubst %.cpp, %.o, $(SOURCES))

all: clean $(TARGET) 

.cpp.o:
	$(CC) ${OPTIMIZE} -o $@ -c $*.cpp  $(INCLUDE) -std=c++11
	@echo $(SEPARATOR);

$(TARGET):  $(OBJS)  
	$(CC) ${OPTIMIZE} -o $(TARGET) $(OBJS) $(OBJCOMP) $(LIBS)
#jsonlib:$(OBJS)
#	$(AR)  -r -v $(jsonlib) $(OBJS)
#	rm -rf *.o
#	@echo $(SEPARATOR);

clean:
	rm -f ./$(TARGET)
	rm -f ./*.o
	@echo $(SEPARATOR);
	
# g++ jsonPackage.cpp  -o TestJson -I../include/ -L. libjsoncpp.a -std=c++11

#LINK          = arm-fsl-linux-gnueabi-g++
#LINK          = g++

#LFLAGS        = -Wl,-O1 -Wl,-rpath,/opt/gcc-4.4.4-glibc-2.11.1-multilib-1.0/arm-fsl-linux-gnueabi/lib
#LFLAGS        = -Wl,-O1 -Wl,-rpath

#LIBS          =  $(SUBLIBS)  -L./httpssl/lib -lssl -lcrypto -ldl   -lpthread 
#LIBS          = $(SUBLIBS)

#TARGET        = jsonOut

#OBJECTS       =  build/json_reader.o      \
#                 build/jsonPackage.o  \
#                 build/json_value.o     \
#                 build/json_writer.o               

#all: Makefile $(TARGET)

#$(TARGET):  $(OBJECTS)  
#	$(C) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

#build/jsonPackage.o: jsonPackage.cpp 
#	$(CXX) -c $(CXXFLAGS) $(INCPATH) $(LIBS) -o build/jsonPackage.o jsonPackage.cpp

#build/json_reader.o: json_reader.cpp 
#	$(CXX) -c $(CXXFLAGS) $(INCPATH) $(LIBS) -o build/json_reader.o json_reader.cpp

#build/json_value.o: json_value.cpp 
#	$(CXX) -c $(CXXFLAGS) $(INCPATH) $(LIBS) -o build/json_value.o json_value.cpp

#build/json_writer.o: json_writer.cpp 
#	$(CXX) -c $(CXXFLAGS) $(INCPATH) $(LIBS) -o build/json_writer.o json_writer.cpp

#clean:
#	@rm -vf $(TARGET) build/*.o *~
